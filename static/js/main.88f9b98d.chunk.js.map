{"version":3,"sources":["components/Circles.jsx","components/CircleSelector.jsx","App.js","serviceWorker.js","index.js"],"names":["Circles","props","className","selCircleIdx","CircleSelector","value","onClick","handleCircleSelection","selected","circles","App","circleIdx","setState","state","numbers","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mUAqBeA,G,YAlBC,SAACC,GAAD,OAEd,yBAAKC,UAAU,WACf,yBAAKA,UAAWD,EAAME,eAAiB,CAAC,GAAK,eAAiB,MAA9D,KAGA,yBAAKD,UAAWD,EAAME,eAAiB,CAAC,GAAK,eAAiB,MAA9D,KAGA,yBAAKD,UAAWD,EAAME,eAAiB,CAAC,GAAK,eAAiB,MAA9D,KAGA,yBAAKD,UAAWD,EAAME,eAAiB,CAAC,GAAK,eAAiB,MAA9D,QCUaC,G,MArBQ,SAACH,GAAD,OAEnB,yBAAKC,UAAU,kBACX,4BAAQA,UAAkC,cAAvBD,EAAME,aAA+B,eAAiB,GAAIE,MAAM,YAAYC,QAAS,kBAAML,EAAMM,0BACxF,cAAvBN,EAAME,aAA+B,oBAAsB,mBAEhE,4BAAQD,UAAkC,cAAvBD,EAAME,aAA+B,eAAiB,GAAIE,MAAM,YAAYC,QAAS,kBAAML,EAAMM,0BAC5F,cAAnBN,EAAMO,SAA2B,oBAAsB,mBAE5D,4BAAQN,UAAkC,gBAAvBD,EAAME,aAAiC,eAAiB,GAAIE,MAAM,cAAcC,QAAS,kBAAML,EAAMM,0BAChG,gBAAnBN,EAAMO,SAA6B,oBAAsB,mBAE9D,4BAAQN,UAAkC,iBAAvBD,EAAME,aAAkC,eAAiB,GAAIE,MAAM,eAAeC,QAAS,kBAAML,EAAMM,0BAC9F,iBAAvBN,EAAME,aAAkC,oBAAsB,sBCZrEM,EAAU,CAAC,kBAAmB,kBAAmB,kBAAmB,mBA8C3DC,E,kDA3Cb,aAAe,IAAD,8BACZ,gBAMAH,sBAAwB,SAACI,GACvB,EAAKC,SAAS,CAACT,aAAcQ,KAN/B,EAAKE,MAAQ,CACXV,aAAc,kBACdW,QAAS,IAJC,E,qDAaZ,OACE,yBAAKZ,UAAU,OACb,4BAAQA,UAAU,cAAlB,2BADF,oBAEoBO,EAAQM,KAAKF,MAAMV,cAQrC,8BACA,kBAAC,EAAD,CACEM,QAAUA,EACVN,aAAeY,KAAKF,MAAMV,aAC1BI,sBAAuBQ,KAAKR,wBAG9B,kBAAC,EAAD,CACEE,QAAUA,EAEVK,QAAUC,KAAKF,MAAMV,qB,GAnCba,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.88f9b98d.chunk.js","sourcesContent":["import React from 'react';\nimport './Circles.css';\n\nconst Circles = (props) => (\n  \n  <div className=\"Circles\">\n  <div className={props.selCircleIdx === [1] ? 'selCircleIdx' : null}>\n      1\n  </div>\n  <div className={props.selCircleIdx === [2] ? 'selCircleIdx' : null}>\n      2\n  </div>\n  <div className={props.selCircleIdx === [3] ? 'selCircleIdx' : null}>\n      3\n  </div>\n  <div className={props.selCircleIdx === [4] ? 'selCircleIdx' : null}>\n      4\n  </div>\n</div>\n);\n\nexport default Circles;","import React from 'react';\nimport './CircleSelector.css';\n\n\nconst CircleSelector = (props) => (\n\n    <div className='CircleSelector' >\n        <button className={props.selCircleIdx === 'circleOne' ? 'selCircleIdx' : ''} value='circleOne' onClick={() => props.handleCircleSelection()}>\n            {props.selCircleIdx === 'circleOne' ? 'circle 1 selected' : 'select circle 1' }\n        </button>\n        <button className={props.selCircleIdx === 'circleTwo' ? 'selCircleIdx' : ''} value='circleTwo' onClick={() => props.handleCircleSelection()}>\n            {props.selected === 'circleTwo' ? 'circle 2 selected' : 'select circle 2' }\n        </button>\n        <button className={props.selCircleIdx === 'circleThree' ? 'selCircleIdx' : ''} value='circleThree' onClick={() => props.handleCircleSelection()}>\n            {props.selected === 'circleThree' ? 'circle 3 selected' : 'select circle 3' }\n        </button>\n        <button className={props.selCircleIdx === 'fourthCircle' ? 'selCircleIdx' : ''} value='fourthCircle' onClick={() => props.handleCircleSelection()}>\n            {props.selCircleIdx === 'fourthCircle' ? 'circle 4 selected' : 'select circle 4' }\n        </button>\n    </div>\n    )\n\n\n\n\nexport default CircleSelector\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport Circles from './components/Circles';\nimport CircleSelector from './components/CircleSelector';\n\nconst circles = ['SELECT CIRCLE 1', 'SELECT CRICLE 2', 'SELECT CIRCLE 3', 'SELECT CIRCLE 4'];\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      selCircleIdx: 'SELECT CIRCLE 1' ,\n      numbers: [],\n      };\n    }\n    handleCircleSelection = (circleIdx) => {\n      this.setState({selCircleIdx: circleIdx})\n    }\n \n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">UNIT 4 FINAL ASSESSMENT</header>\n        Selected circle: {circles[this.state.selCircleIdx]}\n        {/* <button onClick={() => this.setState((state) => {\n          return {\n            selCircleIdx: ++state.selCircleIdx % 4\n          };\n        })}>\n          Pick\n        </button> */}\n        <main>\n        <CircleSelector \n          circles= {circles} \n          selCircleIdx= {this.state.selCircleIdx}\n          handleCircleSelection={this.handleCircleSelection}\n        />\n          \n        <Circles\n          circles= {circles} \n         \n          numbers= {this.state.selCircleIdx}\n         />\n          \n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}